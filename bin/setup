#! /usr/bin/env bash

set -o nounset
set -o errexit
set -o pipefail
IFS=$'\n\t'

SCRIPT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_ROOT/.." && pwd)"
TEMPLATES_ROOT="$PROJECT_ROOT/.config/setup"

# Label: Create Global Environment
# Description: Create global environment.
create_global_environment() {
  local template_path="$TEMPLATES_ROOT/.env.tt"
  local output_path="$PROJECT_ROOT/.env"
  local password="$((RANDOM * RANDOM * RANDOM))"

  if [[ -f "$output_path" ]]; then
    printf "%s\n" ".env exists. Skipped."
    return
  fi

  printf "%s\n" "Creating .env..."
  cp "$template_path" "$output_path"
  sed -i '' "s|<password>|$password|g" "$output_path"
}

# Label: Create Development Environment
# Description: Create development environment.
create_development_environment() {
  local template_path="$TEMPLATES_ROOT/.env.development.tt"
  local output_path="$PROJECT_ROOT/.env.development"

  if [[ -f "$output_path" ]]; then
    printf "%s\n" ".env.development exists. Skipped."
    return
  fi

  printf "%s\n" "Creating .env.development..."
  cp "$template_path" "$output_path"
}

# Label: Create Test Environment
# Description: Create test environment.
create_test_environment() {
  local template_path="$TEMPLATES_ROOT/.env.test.tt"
  local output_path="$PROJECT_ROOT/.env.test"

  if [[ -f "$output_path" ]]; then
    printf "%s\n" ".env.test exists. Skipped."
    return
  fi

  printf "%s\n" "Creating .env.test..."
  cp "$template_path" "$output_path"
}

# Label: Create Procfile (development)
# Description: Create Procfile for development environment.
create_development_procfile() {
  local template_path="$TEMPLATES_ROOT/Procfile.dev.tt"
  local output_path="$PROJECT_ROOT/Procfile.dev"

  if [[ -f "$output_path" ]]; then
    printf "%s\n" "Procfile.dev exists. Skipped."
    return
  fi

  cp "$template_path" "$output_path"
  printf "%s\n" "Creating Procfile.dev..."
}

# Label: Create Docker Compose Development Configuration
# Description: Create Docker Compose configuration for development environment.
create_docker_compose_development_configuration() {
  local template_path="$TEMPLATES_ROOT/compose.dev.yml.tt"
  local output_path="$PROJECT_ROOT/compose.dev.yml"

  if [[ -f "$output_path" ]]; then
    printf "%s\n" "compose.dev.yml exists. Skipped."
    return
  fi

  cp "$template_path" "$output_path"
  printf "%s\n" "Creating compose.dev.yml..."
}

# Label: Install Gems
# Description: Install gem dependencies.
install_gems() {
  printf "%s\n" "Installing gem dependencies..."
  bundle install
}

# Label: Install Packages
# Description: Install JavaScript package dependencies.
install_packages() {
  printf "%s\n" "Installing package dependencies..."
  bundle install
}

# Label: Prepare Database
# Description: Prepare database for development and test environments.
prepare_database() {
  printf "%s\n" "Preparing databases..."
  bundle exec hanami db prepare
}

printf "%s\n\n" "Setting up Terminus..."
create_global_environment
create_development_environment
create_test_environment
create_development_procfile
create_docker_compose_development_configuration
install_gems
install_packages
prepare_database
